import ProjectDescription
import ProjectDescriptionHelpers

let essentialAppTarget = TargetReference.project(
    path: "EssentialApp",
    target: "EssentialApp"
)

let ciiOSScheme: Scheme = .scheme(
    name: "CI_iOS",
    buildAction: .buildAction(targets: [essentialAppTarget]),
    testAction: .testPlans([.path("Testplans/CI_iOS.xctestplan")]),
    runAction: .runAction(configuration: .essentialAppDebug, executable: essentialAppTarget),
    archiveAction: .archiveAction(configuration: .essentialAppRelease),
    analyzeAction: .analyzeAction(configuration: .essentialAppRelease)
)

let essentialFeedTarget = TargetReference.project(
    path: "EssentialFeed",
    target: "EssentialFeed"
)

let cimacOSScheme: Scheme = .scheme(
    name: "CI_macOS",
    buildAction: .buildAction(targets: [essentialFeedTarget]),
    testAction: .testPlans([.path("Testplans/CI_macOS.xctestplan")]),
    runAction: .runAction(configuration: .essentialFeedDebug, executable: essentialFeedTarget),
    archiveAction: .archiveAction(configuration: .essentialFeedRelease),
    analyzeAction: .analyzeAction(configuration: .essentialFeedRelease)
)

let workspace = Workspace(
    name: "EssentialApp",
    projects: ["EssentialFeed", "EssentialApp"],
    schemes: [ciiOSScheme, cimacOSScheme],
    generationOptions: .options(autogeneratedWorkspaceSchemes: .disabled)
)

